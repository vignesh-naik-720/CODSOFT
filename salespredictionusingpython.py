# -*- coding: utf-8 -*-
"""salesPredictionUsingPython.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mLlMrRmrK0rAjYsOiNuhBFcW86SbUibP

# **Sales Prediction Using Python**
By: Vignesh Naik
As part of Data Science Internship at CodSoft.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

!pip install gradio

import gradio as gr

data = pd.read_csv('advertising.csv')

print(data.head())

X = data[['TV', 'Radio', 'Newspaper']]
Y = data['Sales']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, Y_train)

def plot_TV_Sales_regression_line():
    X_tv = data[['TV']]
    model_tv = LinearRegression()
    model_tv.fit(X_tv, Y)

    predictions = model_tv.predict(X_tv)

    plt.scatter(data['TV'], Y, color='blue', label="Actual Sales")

    plt.plot(data['TV'], predictions, color='red', label="Regression Line")

    plt.xlabel("TV Advertisement Spending (in thousands)")
    plt.ylabel("Sales (in thousands of dollars)")
    plt.title("TV Advertisement Spending vs Sales")
    plt.legend()
    plt.show()

plot_TV_Sales_regression_line()

def plot_Radio_Sales_regression_line():
    X_radio = data[['Radio']]
    model_radio = LinearRegression()
    model_radio.fit(X_radio, Y)

    predictions = model_radio.predict(X_radio)

    plt.scatter(data['Radio'], Y, color='blue', label="Actual Sales")

    plt.plot(data['Radio'], predictions, color='red', label="Regression Line")

    plt.xlabel("Radio Advertisement Spending (in thousands)")
    plt.ylabel("Sales (in thousands of dollars)")
    plt.title("Radio Advertisement Spending vs Sales")
    plt.legend()
    plt.show()

plot_Radio_Sales_regression_line()

def plot_Newspaper_Sales_regression_line():
    X_newspaper = data[['Newspaper']]
    model_newspaper = LinearRegression()
    model_newspaper.fit(X_newspaper, Y)

    predictions = model_newspaper.predict(X_newspaper)

    plt.scatter(data['Newspaper'], Y, color='blue', label="Actual Sales")

    plt.plot(data['Newspaper'], predictions, color='red', label="Regression Line")

    plt.xlabel("Newspaper Advertisement Spending (in thousands)")
    plt.ylabel("Sales (in thousands of dollars)")
    plt.title("Newspaper Advertisement Spending vs Sales")
    plt.legend()
    plt.show()

plot_Newspaper_Sales_regression_line()

def predict_sales(tv, radio, newspaper):
    input_data = [[tv, radio, newspaper]]
    prediction = model.predict(input_data)[0]
    return f"Predicted Sales: {round(prediction, 2)} thousand dollars."

interface = gr.Interface(
    fn=predict_sales,
    inputs=[
        gr.Slider(0, 300, label="TV Advertisement Spending (in thousands)"),
        gr.Slider(0, 50, label="Radio Advertisement Spending (in thousands)"),
        gr.Slider(0, 50, label="Newspaper Advertisement Spending (in thousands)")
    ],
    outputs="text",
    title="Sales Prediction Using Python",
    description="Input the advertisement spendings on TV, Radio, and Newspaper to get a predicted sales value.",
)

interface.launch()

